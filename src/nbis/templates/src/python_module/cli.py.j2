# File generated by nbis-admin {{ version }}
# Do not edit this file!
"""Console script for {{ project_name }}"""

import logging
import os
import pathlib

import click

from {{ project_name }}.core import options
from {{ project_name }}.env import Environment

from . import __version__

{% if author -%}
  __author__ = "{{ author }}"
{% endif -%}

logger = logging.getLogger(__name__)


PKG_DIR = pathlib.Path(__file__).absolute().parent
CONTEXT_SETTINGS = {"auto_envvar_prefix": "{{ project_name.upper() }}", "show_default": True}

pass_environment = click.make_pass_decorator(Environment, ensure=True)
cmd_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), "commands"))

{% set ProjectName = project_name.replace("_", " ").title().replace(" ", "") %}
class {{ ProjectName }}Cli(click.MultiCommand):
    """{{ project_name }} CLI class"""

    module = "{{ project_name }}.commands"
    cmd_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), "commands"))

    def list_commands(self, ctx):
        data = []
        for filename in os.listdir(self.cmd_folder):
            if filename.endswith(".py") and not filename.startswith("__"):
                data.append(filename[:-3])
        data.sort()
        return data

    def get_command(self, ctx, cmd_name):
        mod = __import__(f"{self.module}.{cmd_name}", None, None, ["main"])
        return mod.main


@click.command(
    cls={{ ProjectName }}Cli,
    context_settings=CONTEXT_SETTINGS,
    help=__doc__,
    name="{{ project_name }}",
)
@click.version_option(version=__version__)
@options.config_file_option()
@options.debug_option()
@pass_environment
def cli(env):
    """CLI docstring for {{ project_name }}"""
    logging.basicConfig(
        level=logging.INFO, format="%(levelname)s [%(name)s:%(funcName)s]: %(message)s"
    )
    if env.debug:
        logging.getLogger().setLevel(logging.DEBUG)
