[project]
name = "{{ python_module }}"
description = "{{ description }}"
readme = "README.md"
# url = https://{{ project_name}}/
keywords = ["bioinformatics"]
{% if open_source_license -%}
    license: {text = "{{ open_source_license }}"}
{% endif -%}
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Bio-Informatics"
]
dependencies = []
dynamic = ["version"]

[dependency-groups]
dev = [
    "pylint>=3.3.6",
    "pyright>=1.1.398",
    "pytest>=8.3.5",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.hooks.vcs]
version-file = "src/{{ python_module }}/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ python_module }}"]

[project.scripts]
{{ python_module }} = "{{ python_module }}.cli:cli"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --doctest-modules"
pythonpath = [
    "src",
]
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.pyright]
venvPath = "."          # uv installs the venv in the current dir
venv = ".venv"          #       in a folder called `.venv`
include = ["src"]
pythonVersion = "3.11"  # if library, specify the _lowest_ you support
reportMissingTypeStubs = false
reportAttributeAccessIssue = false
reportCallIssue = false
reportOptionalMemberAccess = false
reportAssignmentType = false


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39
isolated_build = true

[testenv]
deps =
    pytest
    pytest-coverage
    pytest-runner
    pip>=22.1.0
    wheel
commands = pytest
"""

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.format]
docstring-code-format=true

[tool.ruff.lint]
select = [
  "A",    # warn about shadowing built-ins
  "E",    # style stuff, whitespaces
  "F",    # important pyflakes lints
  "I",    # import sorting
  "N",    # naming
  "T100", # breakpoints
]
ignore = ["N806"]

[tool.ruff.lint.isort]
# so it knows to group first-party stuff last
known-first-party = ["{{ python_module }}"]
